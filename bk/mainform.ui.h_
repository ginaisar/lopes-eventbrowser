/****************************************************************************
** Ui.h extension file, included from the uic-generated form implementation.
**
** If you want to add, delete, or rename functions or slots, use
** Qt Designer to update this file, preserving your code.
**
** You should not define a constructor or destructor in this file.
** Instead, write your code in functions called init() and destroy().
** These will automatically be called by the form's constructor and
** destructor.
*****************************************************************************/
#include "Draw.h"
//nclude "ReadRootTree.h"
//#include <qstring.h>
#include <qstatusbar.h>
#include <qfiledialog.h>
#include <qmessagebox.h>
#include <string>


#ifdef DEBUG
#include <iostream>
using namespace std;
#endif

//variables for the form
Draw * draw = new Draw(); //the Draw object for drawing stuff
QWidget * newTab; // pointer to newly created tab
TQtWidget * newTqtw; // pointer to newly created TQtWidget
QVBoxLayout * newLayout; // pointer for laying out TQtWidget properly
static string fileTypeFilterSingle = "Root File (*.root);;"
                                     "Encapsulated Postscript (*.eps);;"
                                     "PDF (*.pdf);;Postscript (*.ps);;"
                                     "JPEG (*.jpg);;"
                                     "C++ Macro (*.cxx)";
static string fileTypeFilterMultiple = "Encapsulated Postscript (*.eps);; "
                                       "Postscript (*.ps)";


void MainForm::init()
{
//	draw = new Draw();
	draw->setSourceRootTree("tree-ka104ev.root","T");
//	connect( btnDraw, SIGNAL(clicked()), draw, SLOT( drawAntennaPosition()));
	applyRootCut()	;
	statusBar()->message("Ready");
}

void MainForm::fileOpen()
{

}

void fileSaveSingle()
{
	
}

void MainForm::fileSave()
{
	// todo: replace the illegal character from the tab label so that it's name
	// can be used as filename
	QString file = QFileDialog::getSaveFileName(
		            tabsGraph->tabLabel(tabsGraph->currentPage()),
					fileTypeFilterSingle,
                    this,
                    tr("save file dialog"),
                    tr("Choose a filename to save under"));


	if (file) draw->saveAs(NULL,file.ascii());
}


void MainForm::fileSaveAllSingle()
{
	int tabcount = tabsGraph->count();
	TQtWidget * tqtw;

	if (tabcount < 1) return;

	QString file = QFileDialog::getSaveFileName("",
					fileTypeFilterMultiple,
                    this,
                    tr("save file dialog"),
                    tr("Choose a filename to save under"));

	if (!file) return;

	//open for saving multiple canvas in one file
	draw->saveAs(NULL,file.ascii(),Draw::OPEN_ONLY); 
	
	for (int i = 0; i<tabcount ; i++)
	{
		tqtw = (TQtWidget*) tabsGraph->page(i)
			    ->child("tqtw","TQtWidget", FALSE);
		if (tqtw)
		{
			draw->saveAs(tqtw->GetCanvas(),file.ascii());
		}
	}

	draw->saveAs(NULL,file.ascii(),Draw::CLOSE_ONLY);
}


void MainForm::fileSaveAllMultiple()
{
	QMessageBox::information(this, "Message",
    "Sorry, not implemented yet." );
}

void MainForm::filePrint()
{

}


void MainForm::fileExit()
{

}


void MainForm::editUndo()
{

}

void MainForm::editRedo()
{

}


void MainForm::editCut()
{

}


void MainForm::editCopy()
{

}


void MainForm::editPaste()
{
}


void MainForm::enableDrawButton()
{
	cout << tabsAction->currentPage()->name() << endl;
	if (tabsAction->currentPage() == tab2DGraph)
	{
		btnDraw->setEnabled(!txt2DXAxis->text().isEmpty() &&
			                !txt2DYAxis->text().isEmpty());
		if (ckb2DErrors->isChecked())
			btnDraw->setEnabled(!txt2DXAxisError->text().isEmpty() &&
								!txt2DYAxisError->text().isEmpty());
	}
	else if (tabsAction->currentPage() == tabPosition)
	{
		btnDraw->setEnabled(true);
	}
	else if (tabsAction->currentPage() == tabRootTree)
	{
		btnDraw->setEnabled(false);
	}
}


void MainForm::helpIndex()
{

}


void MainForm::helpContents()
{

}


void MainForm::helpAbout()
{

}


void MainForm::Draw()
{
	if (ckbNewTab->isChecked())
		addNewTab();
	
	if (tabsAction->currentPage() == tabPosition)
	{
		draw->drawAntennaPosition();
		tabsGraph->setTabLabel(tabsGraph->currentPage(),
							   "AntennaPosition");
	}
	else if (tabsAction->currentPage() == tab2DGraph)
	{
		cout << "x" <<txt2DXAxis->text().ascii() << endl;
		cout << "y" << txt2DYAxis->text().ascii() << endl; 

		draw->draw2DGraph(txt2DXAxis->text().ascii(),
						  txt2DYAxis->text().ascii(),
			(ckb2DErrors->isChecked())? txt2DXAxisError->text().ascii() : NULL,
			(ckb2DErrors->isChecked())? txt2DYAxisError->text().ascii() : NULL
			 );

		tabsGraph->setTabLabel(tabsGraph->currentPage(),
							   txt2DXAxis->text() + "-" + txt2DYAxis->text());
	}
	
}



void MainForm::addNewTab()
{
//	int tabcount = tabsGraph->count();
	newTab = new QWidget(tabsGraph,"tab_"); //todo add number!
	newTqtw = new TQtWidget(newTab,"tqtw");
	newLayout = new QVBoxLayout(newTab,0,6,"tabLayout");
	
	newLayout->addWidget(newTqtw);
	tabsGraph->addTab(newTab,tr("Untitled Graph"));

	//focus on the newly created tab
	tabsGraph->showPage(newTab);

	new QListViewItem(lvGraphs,"Untitled Graph");
}


void MainForm::setTabAsCanvas( QWidget * qw )
{

	// find the TQtWidget belong to the tab page
	TQtWidget * tqtw = (TQtWidget*) qw->child("tqtw","TQtWidget", FALSE);
	// if found, set it as current canvas for drawing
	if (tqtw) draw->setCanvas(tqtw->GetCanvas());
}



void MainForm::applyRootCut()
{
	draw->rootTree->setEventCut(txtEventCut->text().ascii());
	btnApplyCut->setEnabled(false);
	txtNumberEvents->setText(draw->rootTree->getLastMessage());
//	statusBar()->message(draw->rootTree->getLastMessage(),1500);
}


void MainForm::txtEventCut_changed()
{
	btnApplyCut->setEnabled(true);
}


